# .github/workflows/auto-update-dependencies.yml
name: Auto-update Dependencies

on:
  push:
    branches: [ main]
    paths:
      - 'pyproject.toml'
      - 'renv/**'
      - '.github/workflows/auto-update-dependencies.yml'
  
  # Permettre déclenchement manuel
  workflow_dispatch:
  
  # Mise à jour hebdomadaire automatique
  schedule:
    - cron: '0 2 * * 1'  # Tous les lundis à 2h

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📊 Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.3.0'

    - name: ⚡ Install uv
      run: |
        pip install uv
        echo "uv version: $(uv --version)"

    - name: 🔧 Setup R dependencies
      run: |
        if ! R -e "if (!require('renv', quietly = TRUE)) quit(status = 1)"; then
          R -e "install.packages('renv', repos = 'https://cloud.r-project.org/')"
        fi

    - name: 📦 Update Python dependencies
      run: |
        if [ -f "pyproject.toml" ]; then
          echo "🐍 Updating Python dependencies..."
          
          # Backup current lock file
          [ -f "uv.lock" ] && cp uv.lock uv.lock.backup
          
          # Update lock file
          uv lock --upgrade
          
          # Check if lock file changed
          if ! cmp -s uv.lock uv.lock.backup 2>/dev/null; then
            echo "PYTHON_UPDATED=true" >> $GITHUB_ENV
            echo "✅ uv.lock updated"
          else
            echo "✅ uv.lock already up to date"
          fi
          
          # Clean backup
          rm -f uv.lock.backup
        else
          echo "⚠️ No pyproject.toml found"
        fi

    - name: 📊 Update R dependencies
      run: |
        if [ -d "renv" ] || [ -f "renv.lock" ]; then
          echo "📊 Updating R dependencies..."
          
          R -e "
          # Backup current lock file
          if (file.exists('renv.lock')) {
            file.copy('renv.lock', 'renv.lock.backup')
          }
          
          # Initialize renv if needed
          if (!dir.exists('renv')) {
            renv::init(bare = TRUE)
          }
          
          # Update packages
          tryCatch({
            renv::update()
            renv::snapshot(prompt = FALSE)
            
            # Check if lock file changed
            if (file.exists('renv.lock.backup')) {
              if (!identical(readLines('renv.lock'), readLines('renv.lock.backup'))) {
                cat('R_UPDATED=true\n', file = Sys.getenv('GITHUB_ENV'), append = TRUE)
                cat('✅ renv.lock updated\n')
              } else {
                cat('✅ renv.lock already up to date\n')
              }
              file.remove('renv.lock.backup')
            } else {
              cat('R_UPDATED=true\n', file = Sys.getenv('GITHUB_ENV'), append = TRUE)
              cat('✅ renv.lock created\n')
            }
          }, error = function(e) {
            cat('⚠️ R update failed:', conditionMessage(e), '\n')
            if (file.exists('renv.lock.backup')) {
              file.copy('renv.lock.backup', 'renv.lock', overwrite = TRUE)
              file.remove('renv.lock.backup')
            }
          })
          "
        else
          echo "⚠️ No renv configuration found"
        fi

    - name: 📝 Generate update summary
      run: |
        echo "## 🔄 Dependency Update Summary" > update_summary.md
        echo "" >> update_summary.md
        echo "**Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> update_summary.md
        echo "**Commit:** ${{ github.sha }}" >> update_summary.md
        echo "" >> update_summary.md
        
        if [ "$PYTHON_UPDATED" = "true" ]; then
          echo "### 🐍 Python Dependencies Updated" >> update_summary.md
          if [ -f "uv.lock" ]; then
            echo "\`\`\`" >> update_summary.md
            echo "uv.lock updated" >> update_summary.md
            echo "\`\`\`" >> update_summary.md
          fi
        else
          echo "### 🐍 Python Dependencies" >> update_summary.md
          echo "No changes needed" >> update_summary.md
        fi
        
        echo "" >> update_summary.md
        
        if [ "$R_UPDATED" = "true" ]; then
          echo "### 📊 R Dependencies Updated" >> update_summary.md
          if [ -f "renv.lock" ]; then
            echo "\`\`\`" >> update_summary.md
            echo "renv.lock updated" >> update_summary.md
            echo "\`\`\`" >> update_summary.md
          fi
        else
          echo "### 📊 R Dependencies" >> update_summary.md
          echo "No changes needed" >> update_summary.md
        fi

    - name: 🔍 Check for changes
      id: check_changes
      run: |
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No changes to commit"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📝 Changes detected:"
          git diff --name-only
        fi

    - name: 💾 Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all lock files
        git add -A
        
        # Create commit message
        COMMIT_MSG="🤖 Auto-update dependencies"
        
        if [ "$PYTHON_UPDATED" = "true" ] && [ "$R_UPDATED" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG (Python + R)"
        elif [ "$PYTHON_UPDATED" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG (Python)"
        elif [ "$R_UPDATED" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG (R)"
        fi
        
        git commit -m "$COMMIT_MSG" -m "$(cat update_summary.md)"
        git push

    - name: 📊 Upload summary as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: dependency-update-summary
        path: update_summary.md
        retention-days: 30

---

# .github/workflows/dependency-check.yml
name: Dependency Check

on:
  pull_request:
    paths:
      - 'pyproject.toml'
      - 'uv.lock'
      - 'renv.lock'
      - 'renv/**'

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📊 Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.3.0'

    - name: ⚡ Install uv
      run: pip install uv

    - name: 🔍 Check Python dependencies sync
      run: |
        if [ -f "pyproject.toml" ] && [ -f "uv.lock" ]; then
          echo "🐍 Checking Python dependencies..."
          uv sync --check
          echo "✅ Python dependencies are in sync"
        else
          echo "⚠️ Python configuration incomplete"
        fi

    - name: 🔍 Check R dependencies sync
      run: |
        if [ -f "renv.lock" ]; then
          echo "📊 Checking R dependencies..."
          R -e "
          if (!require('renv', quietly = TRUE)) {
            install.packages('renv', repos = 'https://cloud.r-project.org/')
          }
          status <- renv::status()
          if (identical(status, 'No issues found -- the project is in a consistent state.')) {
            cat('✅ R dependencies are in sync\n')
          } else {
            cat('⚠️ R dependencies need attention:\n')
            print(status)
            quit(status = 1)
          }
          "
        else
          echo "⚠️ No renv.lock found"
        fi

    - name: 📋 Generate dependency report
      run: |
        echo "## 🔍 Dependency Check Report" > dependency_report.md
        echo "" >> dependency_report.md
        
        if [ -f "uv.lock" ]; then
          echo "### 🐍 Python Dependencies" >> dependency_report.md
          echo "\`\`\`" >> dependency_report.md
          uv tree 2>/dev/null | head -20 >> dependency_report.md || echo "uv tree not available" >> dependency_report.md
          echo "\`\`\`" >> dependency_report.md
        fi
        
        if [ -f "renv.lock" ]; then
          echo "### 📊 R Dependencies" >> dependency_report.md
          echo "\`\`\`" >> dependency_report.md
          R -e "cat(paste(names(jsonlite::fromJSON('renv.lock')[['Packages']]), collapse = '\n'))" 2>/dev/null >> dependency_report.md || echo "R packages not available" >> dependency_report.md
          echo "\`\`\`" >> dependency_report.md
        fi

    - name: 📊 Upload report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency_report.md

---

# .github/workflows/weekly-update.yml  
name: Weekly Dependency Update

on:
  schedule:
    - cron: '0 9 * * 1'  # Tous les lundis à 9h
  workflow_dispatch:

jobs:
  weekly-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📊 Setup R  
      uses: r-lib/actions/setup-r@v2

    - name: ⚡ Install tools
      run: |
        pip install uv
        R -e "if (!require('renv')) install.packages('renv')"

    - name: 🔄 Full dependency update
      run: |
        echo "🔄 Weekly dependency update..."
        
        # Python
        if [ -f "pyproject.toml" ]; then
          uv lock --upgrade
        fi
        
        # R
        if [ -d "renv" ] || [ -f "renv.lock" ]; then
          R -e "renv::update(); renv::snapshot(prompt = FALSE)"
        fi

    - name: 🔀 Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "🔄 Weekly dependency update"
        title: "🔄 Weekly Dependency Update"
        body: |
          ## 🔄 Weekly Dependency Update
          
          This PR contains the weekly automatic update of dependencies:
          
          - 🐍 Python packages (uv.lock)
          - 📊 R packages (renv.lock)
          
          Please review the changes before merging.
        branch: weekly-dependency-update
        delete-branch: true